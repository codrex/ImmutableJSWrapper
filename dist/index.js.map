{"version":3,"sources":["../src/index.js"],"names":["Handler","target","name","isValue","has","value","get","createImmutableProxy","attribute","args","apply","hasProperty","configurable","enumerable","keys","map","key","push","throwError","Error","handler","Proxy"],"mappings":";;;;;;;AAAA;;;;;;;;;;AACA;;;;;;AAKA;IACMA,O;;;;;;;;;wBACAC,M,EAAQC,I,EAAM;AAChB,UAAI,QAAOA,IAAP,MAAgB,QAApB,EAA8B;AAC5B,eAAOD,MAAM,CAACC,IAAD,CAAb;AACD,OAHe,CAIhB;;;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACG,GAAP,CAAWF,IAAX,CAAhB;;AAEA,UAAIC,OAAJ,EAAa;AACX,YAAME,KAAK,GAAGJ,MAAM,CAACK,GAAP,CAAWJ,IAAX,CAAd;AACA,eAAOK,oBAAoB,CAACF,KAAD,CAA3B;AACD,OAVe,CAYhB;;;AACA,UAAMG,SAAS,GAAGP,MAAM,CAACC,IAAD,CAAxB,CAbgB,CAehB;;AACA,UAAI,OAAOM,SAAP,KAAqB,UAAzB,EAAqC;AACnC,eAAO,YAAa;AAAA,4CAATC,IAAS;AAATA,YAAAA,IAAS;AAAA;;AAClB,cAAMJ,KAAK,GAAGG,SAAS,CAACE,KAAV,CAAgBT,MAAhB,EAAwBQ,IAAxB,CAAd,CADkB,CAElB;;AACA,iBAAOF,oBAAoB,CAACF,KAAD,CAA3B;AACD,SAJD;AAKD;;AACD,aAAOG,SAAP;AACD;;;6CAEwBP,M,EAAQC,I,EAAM;AACrC,UAAMS,WAAW,GAAGV,MAAM,CAACG,GAAP,CAAWF,IAAX,CAApB;;AACA,UAAIS,WAAJ,EAAiB;AACf,eAAO;AAAEC,UAAAA,YAAY,EAAE,IAAhB;AAAsBC,UAAAA,UAAU,EAAE,IAAlC;AAAwCR,UAAAA,KAAK,EAAEJ,MAAM,CAACK,GAAP,CAAWJ,IAAX;AAA/C,SAAP;AACD;AACF;;;4BAEOD,M,EAAQ;AACd,UAAMa,IAAI,GAAG,EAAb;AACAb,MAAAA,MAAM,CAACc,GAAP,CAAW,UAACV,KAAD,EAAQW,GAAR,EAAgB;AACzBF,QAAAA,IAAI,CAACG,IAAL,CAAUD,GAAV;AACD,OAFD;AAGA,aAAOF,IAAP;AACD;;;;KAGH;;;AACA,SAASP,oBAAT,CAA8BF,KAA9B,EAAyD;AAAA,MAApBa,UAAoB,uEAAP,KAAO;;AACvD,MAAI,CAAC,4BAAYb,KAAZ,CAAL,EAAyB;AACvB,QAAIa,UAAJ,EAAgB,MAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AAChB,WAAOd,KAAP;AACD;;AAED,MAAMe,OAAO,GAAG,IAAIpB,OAAJ,EAAhB;AACA,SAAO,IAAIqB,KAAJ,CAAUhB,KAAV,EAAiBe,OAAjB,CAAP;AACD;;eAEcb,oB","sourcesContent":["import { isImmutable, List } from 'immutable';\n/**\n * This a simple proxy wrapper around immutable js collections.\n * It makes getting values from an immutable js collections behave the same\n * way as javascript objects.\n */\n/* eslint-disable class-methods-use-this */\nclass Handler {\n  get(target, name) {\n    if (typeof name === 'symbol') {\n      return target[name];\n    }\n    // checking that value store in the immutable collections\n    const isValue = target.has(name);\n\n    if (isValue) {\n      const value = target.get(name);\n      return createImmutableProxy(value);\n    }\n\n    // when targeting attribute and method attached to an immutable collections\n    const attribute = target[name];\n\n    // when attribute is a method call the method and pass in any argument passed\n    if (typeof attribute === 'function') {\n      return (...args) => {\n        const value = attribute.apply(target, args);\n        // if value return is an immutable collections return the value as a proxy\n        return createImmutableProxy(value);\n      };\n    }\n    return attribute;\n  }\n\n  getOwnPropertyDescriptor(target, name) {\n    const hasProperty = target.has(name);\n    if (hasProperty) {\n      return { configurable: true, enumerable: true, value: target.get(name) };\n    }\n  }\n\n  ownKeys(target) {\n    const keys = [];\n    target.map((value, key) => {\n      keys.push(key);\n    });\n    return keys;\n  }\n}\n\n// wraps a value in a proxy when value is an immutable collections\nfunction createImmutableProxy(value, throwError = false) {\n  if (!isImmutable(value)) {\n    if (throwError) throw new Error('Expected an immutable object');\n    return value;\n  }\n\n  const handler = new Handler();\n  return new Proxy(value, handler);\n}\n\nexport default createImmutableProxy;\n"],"file":"index.js"}